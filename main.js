// üìú –ü—Ä–∞–≤–∏–ª–∞ –¥–Ω—è
const rules = [
  "–ù–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–π—Å—è ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ—Å—É—Ä—Å ‚Äî –æ—Ç—Å–µ–∫–∞–π.",
  "–•–∏—â–Ω–∏–∫ –º–æ–ª—á–∏—Ç —á–∞—â–µ, —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç.",
  "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–æ–±–æ–π ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º.",
  "–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –≤–æ–π–Ω–∞ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
  "–ì—Ä—É–±–æ—Å—Ç—å ‚Äî —Ñ–∏–ª—å—Ç—Ä. –ö—Ç–æ —Å–ª–∞–± ‚Äî –æ—Ç–ø–∞–¥—ë—Ç —Å–∞–º.",
  "–°–Ω–∞—á–∞–ª–∞ –¥–æ–º–∏–Ω–∏—Ä—É–π, –ø–æ—Ç–æ–º –¥—Ä—É–∂–∏.",
  "–ï—Å–ª–∏ –Ω–µ –¥–∞–≤—è—Ç –Ω–∞ —Ç–µ–±—è ‚Äî –¥–∞–≤–∏ —Ç—ã.",
  "–õ–æ–∂—å ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ ‚â† –≤—ã–≥–æ–¥–Ω–æ–µ. –í—ã–±–∏—Ä–∞–π –≤—ã–≥–æ–¥—É."
];

function getRule() {
  const index = Math.floor(Math.random() * rules.length);
  document.getElementById("rule").textContent = rules[index];
}

document.addEventListener("DOMContentLoaded", getRule);

// üìã –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
function addTask() {
  const input = document.getElementById("taskInput");
  const value = input.value.trim();
  if (value) {
    const li = document.createElement("li");
    li.textContent = "üîπ " + value;
    document.getElementById("taskList").appendChild(li);
    input.value = "";
    saveLog("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + value);
  }
}

// üë• –û–∫—Ä—É–∂–µ–Ω–∏–µ
function addPerson() {
  const name = document.getElementById("personName").value.trim();
  const status = document.getElementById("personStatus").value;
  if (name) {
    const li = document.createElement("li");
    li.innerHTML = `${name} ‚Äî <span class="${status}">${status.toUpperCase()}</span>`;

    const btn = document.createElement("button");
    btn.textContent = "‚ùå";
    btn.style.marginLeft = "10px";
    btn.onclick = () => {
      li.remove();
      saveLog("–£–¥–∞–ª—ë–Ω —á–µ–ª–æ–≤–µ–∫: " + name);
      updatePeopleStorage();
    };

    li.appendChild(btn);
    document.getElementById("peopleList").appendChild(li);
    saveLog("–î–æ–±–∞–≤–ª–µ–Ω —á–µ–ª–æ–≤–µ–∫: " + name + " (" + status + ")");
    document.getElementById("personName").value = "";
    updatePeopleStorage();
  }
}

function updatePeopleStorage() {
  const items = Array.from(document.querySelectorAll("#peopleList li")).map(li => li.innerHTML);
  localStorage.setItem("people", JSON.stringify(items));
}

// üß† –õ–æ–≥
function saveLog(entry) {
  const now = new Date().toLocaleString();
  console.log(`[LOG] ${now} ‚Äî ${entry}`);
}

// üí∞ –§–∏–Ω–∞–Ω—Å—ã
let totalIncome = 0;
let totalExpense = 0;

function addFinance() {
  const income = parseFloat(document.getElementById("income").value) || 0;
  const expense = parseFloat(document.getElementById("expense").value) || 0;

  totalIncome += income;
  totalExpense += expense;

  const balance = totalIncome - totalExpense;
  const percent = totalExpense === 0 ? 100 : Math.round((totalIncome / totalExpense) * 100);

  document.getElementById("financeStats").innerHTML = `
    üíµ –î–æ—Ö–æ–¥: ${totalIncome} <br>
    üí∏ –†–∞—Å—Ö–æ–¥: ${totalExpense} <br>
    üìä –ë–∞–ª–∞–Ω—Å: <span style="color:${balance >= 0 ? '#0f0' : '#f00'}">${balance}</span><br>
    ‚öñÔ∏è –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥: <span style="color:${
      percent > 100 ? '#0f0' : percent < 100 ? '#f00' : '#ff0'
    }">${percent}%</span>
  `;

  saveLog(`–§–∏–Ω–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: +${income}, -${expense}`);
  document.getElementById("income").value = "";
  document.getElementById("expense").value = "";
}

// üèãÔ∏è –§–∏–∑–æ
function addWorkout() {
  const exercise = document.getElementById("exercise").value.trim();
  const amount = document.getElementById("amount").value.trim();

  if (exercise && amount) {
    const li = document.createElement("li");
    li.textContent = `üèÉ ${exercise}: ${amount}`;
    document.getElementById("fitLog").appendChild(li);
    saveLog(`–§–∏–∑–æ: ${exercise} ‚Äî ${amount}`);
    document.getElementById("exercise").value = "";
    document.getElementById("amount").value = "";
    updateFitChart();
  }
}

// üìä –ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–∑–æ
let fitChart;

function updateFitChart() {
  const items = Array.from(document.querySelectorAll("#fitLog li"));
  const dataMap = {};

  items.forEach(item => {
    const [type, value] = item.textContent.replace("üèÉ ", "").split(":").map(s => s.trim());
    const amount = parseFloat(value);
    if (!isNaN(amount)) {
      dataMap[type] = (dataMap[type] || 0) + amount;
    }
  });

  const labels = Object.keys(dataMap);
  const values = Object.values(dataMap);

  if (fitChart) {
    fitChart.destroy();
  }

  const ctx = document.getElementById("fitChart").getContext("2d");
  fitChart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [{
        label: "–°—É–º–º–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        data: values,
        backgroundColor: "#0f0",
        borderColor: "#0f0",
        borderWidth: 1
      }]
    },
    options: {
      plugins: {
        legend: { display: false }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: { color: "#0f0" },
          grid: { color: "#333" }
        },
        x: {
          ticks: { color: "#0f0" },
          grid: { color: "#333" }
        }
      }
    }
  });
}

// ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –ó–∞–≥—Ä—É–∑–∫–∞
function loadPeople() {
  const people = JSON.parse(localStorage.getItem("people") || "[]");
  people.forEach(p => {
    const li = document.createElement("li");
    li.innerHTML = p;

    const btn = document.createElement("button");
    btn.textContent = "‚ùå";
    btn.style.marginLeft = "10px";
    btn.onclick = () => {
      li.remove();
      saveLog("–£–¥–∞–ª—ë–Ω —á–µ–ª–æ–≤–µ–∫: " + li.textContent);
      updatePeopleStorage();
    };

    li.appendChild(btn);
    document.getElementById("peopleList").appendChild(li);
  });
}

function loadTasks() {
  const data = localStorage.getItem("tasks");
  if (data) {
    const tasks = JSON.parse(data);
    tasks.forEach(t => {
      const li = document.createElement("li");
      li.textContent = t;
      document.getElementById("taskList").appendChild(li);
    });
  }
}

function loadWorkouts() {
  const data = localStorage.getItem("fitLog");
  if (data) {
    const entries = JSON.parse(data);
    entries.forEach(entry => {
      const li = document.createElement("li");
      li.textContent = entry;
      document.getElementById("fitLog").appendChild(li);
    });
  }
  updateFitChart();
}

function loadFinance() {
  const data = localStorage.getItem("finance");
  if (data) {
    const { income, expense } = JSON.parse(data);
    totalIncome = income;
    totalExpense = expense;
    addFinance();
  }
}


});
function fixPeopleData() {
  const people = JSON.parse(localStorage.getItem("people") || "[]");
  const fixed = [];

  people.forEach(p => {
    if (p.includes("‚ùå")) {
      fixed.push(p);
    } else {
      const li = document.createElement("li");
      li.innerHTML = p;

      const btn = document.createElement("button");
      btn.textContent = "‚ùå";
      btn.style.marginLeft = "10px";
      btn.onclick = () => {
        li.remove();
        saveLog("–£–¥–∞–ª—ë–Ω —á–µ–ª–æ–≤–µ–∫: " + li.textContent);
        updatePeopleStorage();
      };

      li.appendChild(btn);
      fixed.push(li.innerHTML);
    }
  });

  localStorage.setItem("people", JSON.stringify(fixed));
  location.reload();
}
function fixPeopleData() {
  const people = JSON.parse(localStorage.getItem("people") || "[]");
  const fixed = [];

  people.forEach(p => {
    // –ï—Å–ª–∏ ‚ùå —É–∂–µ –µ—Å—Ç—å, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    if (p.includes("‚ùå")) {
      fixed.push(p);
    } else {
      // –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
      const li = document.createElement("li");
      li.innerHTML = p;

      const btn = document.createElement("button");
      btn.textContent = "‚ùå";
      btn.style.marginLeft = "10px";
      btn.onclick = () => {
        li.remove();
        saveLog("–£–¥–∞–ª—ë–Ω —á–µ–ª–æ–≤–µ–∫: " + li.textContent);
        updatePeopleStorage();
      };

      li.appendChild(btn);
      fixed.push(li.innerHTML);
    }
  });

  localStorage.setItem("people", JSON.stringify(fixed));
}

// ‚è≥ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
window.addEventListener("DOMContentLoaded", () => {
  fixPeopleData();
  loadTasks();
  loadPeople();
  loadWorkouts();
  loadFinance();
  loadReminders();
  getRule();
  setTimeout(checkAlerts, 1000);
  setTimeout(runRecon, 1500);
});