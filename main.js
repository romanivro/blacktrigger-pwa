
// üìú –ü—Ä–∞–≤–∏–ª–∞ –¥–Ω—è
const rules = [
  "–ù–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–π—Å—è ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ—Å—É—Ä—Å ‚Äî –æ—Ç—Å–µ–∫–∞–π.",
  "–•–∏—â–Ω–∏–∫ –º–æ–ª—á–∏—Ç —á–∞—â–µ, —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç.",
  "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–æ–±–æ–π ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º.",
  "–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –≤–æ–π–Ω–∞ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
  "–ì—Ä—É–±–æ—Å—Ç—å ‚Äî —Ñ–∏–ª—å—Ç—Ä. –ö—Ç–æ —Å–ª–∞–± ‚Äî –æ—Ç–ø–∞–¥—ë—Ç —Å–∞–º.",
  "–°–Ω–∞—á–∞–ª–∞ –¥–æ–º–∏–Ω–∏—Ä—É–π, –ø–æ—Ç–æ–º –¥—Ä—É–∂–∏.",
  "–ï—Å–ª–∏ –Ω–µ –¥–∞–≤—è—Ç –Ω–∞ —Ç–µ–±—è ‚Äî –¥–∞–≤–∏ —Ç—ã.",
  "–õ–æ–∂—å ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ ‚â† –≤—ã–≥–æ–¥–Ω–æ–µ. –í—ã–±–∏—Ä–∞–π –≤—ã–≥–æ–¥—É."
];

function getRule() {
  const index = Math.floor(Math.random() * rules.length);
  document.getElementById("rule").textContent = rules[index];
}

document.addEventListener("DOMContentLoaded", getRule);

// üìã –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
function addTask() {
  const input = document.getElementById("taskInput");
  const value = input.value.trim();
  if (value) {
    const li = document.createElement("li");
    li.textContent = "üîπ " + value;
    document.getElementById("taskList").appendChild(li);
    input.value = "";
    saveLog("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + value);
  }
}

// üë• –û–∫—Ä—É–∂–µ–Ω–∏–µ
function addPerson() {
  const name = document.getElementById("personName").value.trim();
  const status = document.getElementById("personStatus").value;
  if (name) {
    const li = document.createElement("li");
    li.innerHTML = `${name} ‚Äî <span class="${status}">${status.toUpperCase()}</span>`;
    document.getElementById("peopleList").appendChild(li);
    saveLog("–î–æ–±–∞–≤–ª–µ–Ω —á–µ–ª–æ–≤–µ–∫: " + name + " (" + status + ")");
    document.getElementById("personName").value = "";
  }
}

// üß† –õ–æ–≥
function saveLog(entry) {
  const now = new Date().toLocaleString();
  console.log(`[LOG] ${now} ‚Äî ${entry}`);
}

// üí∞ –§–∏–Ω–∞–Ω—Å—ã
let totalIncome = 0;
let totalExpense = 0;

function addFinance() {
  const income = parseFloat(document.getElementById("income").value) || 0;
  const expense = parseFloat(document.getElementById("expense").value) || 0;

  totalIncome += income;
  totalExpense += expense;

  const balance = totalIncome - totalExpense;
  const percent = totalExpense === 0 ? 100 : Math.round((totalIncome / totalExpense) * 100);

  document.getElementById("financeStats").innerHTML = `
    üíµ –î–æ—Ö–æ–¥: ${totalIncome} <br>
    üí∏ –†–∞—Å—Ö–æ–¥: ${totalExpense} <br>
    üìä –ë–∞–ª–∞–Ω—Å: <span style="color:${balance >= 0 ? '#0f0' : '#f00'}">${balance}</span><br>
    ‚öñÔ∏è –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥: <span style="color:${
      percent > 100 ? '#0f0' : percent < 100 ? '#f00' : '#ff0'
    }">${percent}%</span>
  `;

  saveLog(`–§–∏–Ω–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: +${income}, -${expense}`);
  document.getElementById("income").value = "";
  document.getElementById("expense").value = "";
}

// üèãÔ∏è –§–∏–∑–æ
function addWorkout() {
  const exercise = document.getElementById("exercise").value.trim();
  const amount = document.getElementById("amount").value.trim();

  if (exercise && amount) {
    const li = document.createElement("li");
    li.textContent = `üèÉ ${exercise}: ${amount}`;
    document.getElementById("fitLog").appendChild(li);
    saveLog(`–§–∏–∑–æ: ${exercise} ‚Äî ${amount}`);
    document.getElementById("exercise").value = "";
    document.getElementById("amount").value = "";
    updateFitChart();
  }
}

// üìä –ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–∑–æ
let fitChart;

function updateFitChart() {
  const items = Array.from(document.querySelectorAll("#fitLog li"));
  const dataMap = {};

  items.forEach(item => {
    const [type, value] = item.textContent.replace("üèÉ ", "").split(":").map(s => s.trim());
    const amount = parseFloat(value);
    if (!isNaN(amount)) {
      dataMap[type] = (dataMap[type] || 0) + amount;
    }
  });

  const labels = Object.keys(dataMap);
  const values = Object.values(dataMap);

  if (fitChart) {
    fitChart.destroy();
  }

  const ctx = document.getElementById("fitChart").getContext("2d");
  fitChart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [{
        label: "–°—É–º–º–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        data: values,
        backgroundColor: "#0f0",
        borderColor: "#0f0",
        borderWidth: 1
      }]
    },
    options: {
      plugins: {
        legend: { display: false }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: { color: "#0f0" },
          grid: { color: "#333" }
        },
        x: {
          ticks: { color: "#0f0" },
          grid: { color: "#333" }
        }
      }
    }
  });
}

// ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveTasks() {
  const tasks = Array.from(document.querySelectorAll("#taskList li")).map(li => li.textContent);
  localStorage.setItem("tasks", JSON.stringify(tasks));
}

function loadTasks() {
  const data = localStorage.getItem("tasks");
  if (data) {
    const tasks = JSON.parse(data);
    tasks.forEach(t => {
      const li = document.createElement("li");
      li.textContent = t;
      document.getElementById("taskList").appendChild(li);
    });
  }
}

function savePeople() {
  const people = Array.from(document.querySelectorAll("#peopleList li")).map(li => li.innerHTML);
  localStorage.setItem("people", JSON.stringify(people));
}

function loadPeople() {
  const data = localStorage.getItem("people");
  if (data) {
    const people = JSON.parse(data);
    people.forEach(p => {
      const li = document.createElement("li");
      li.innerHTML = p;
      document.getElementById("peopleList").appendChild(li);
    });
  }
}

function saveWorkouts() {
  const entries = Array.from(document.querySelectorAll("#fitLog li")).map(li => li.textContent);
  localStorage.setItem("fitLog", JSON.stringify(entries));
}

function loadWorkouts() {
  const data = localStorage.getItem("fitLog");
  if (data) {
    const entries = JSON.parse(data);
    entries.forEach(entry => {
      const li = document.createElement("li");
      li.textContent = entry;
      document.getElementById("fitLog").appendChild(li);
    });
  }
  updateFitChart();
}

function saveFinance() {
  const data = {
    income: totalIncome,
    expense: totalExpense
  };
  localStorage.setItem("finance", JSON.stringify(data));
}

function loadFinance() {
  const data = localStorage.getItem("finance");
  if (data) {
    const { income, expense } = JSON.parse(data);
    totalIncome = income;
    totalExpense = expense;
    addFinance(); // –ø–µ—Ä–µ—Å—á—ë—Ç –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
  }
}

window.addEventListener("beforeunload", () => {
  saveTasks();
  savePeople();
  saveWorkouts();
  saveFinance();
});

window.addEventListener("DOMContentLoaded", () => {
  loadTasks();
  loadPeople();
  loadWorkouts();
  loadFinance();
  getRule();
});
// üß† –ê—Ä—Ö–µ—Ç–∏–ø ‚Äî —Ç–µ—Å—Ç
const testQuestions = [
  {
    q: "–ö–∞–∫ —Ç—ã —Ä–µ—à–∞–µ—à—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?",
    a: { –•–∏—â–Ω–∏–∫: 2, –°—Ç—Ä–∞—Ç–µ–≥: 1 }
  },
  {
    q: "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø–æ—Ä—è–¥–æ–∫?",
    a: { –°—Ç—Ä–∞—Ç–µ–≥: 2, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 1 }
  },
  {
    q: "–¢—ã –º–æ–ª—á–∏—à—å –∏–ª–∏ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—à—å?",
    a: { –•–∏—â–Ω–∏–∫: 1, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 2 }
  },
  {
    q: "–¢—ã –±–æ–ª—å—à–µ —Å–ª—É—à–∞–µ—à—å –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—à—å?",
    a: { –û—Ä–∞–∫—É–ª: 2, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 1 }
  },
  {
    q: "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–∏–Ω?",
    a: { –•–∏—â–Ω–∏–∫: 1, –°—Ç—Ä–∞—Ç–µ–≥: 1, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 1 }
  }
];

let currentQuestion = 0;
let archetypeScores = {
  –•–∏—â–Ω–∏–∫: 0,
  –°—Ç—Ä–∞—Ç–µ–≥: 0,
  –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 0,
  –û—Ä–∞–∫—É–ª: 0,
  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 0
};

function startTest() {
  currentQuestion = 0;
  archetypeScores = {
    –•–∏—â–Ω–∏–∫: 0,
    –°—Ç—Ä–∞—Ç–µ–≥: 0,
    –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 0,
    –û—Ä–∞–∫—É–ª: 0,
    –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 0
  };
  showQuestion();
}

function showQuestion() {
  const quiz = document.getElementById("quiz");
  const result = document.getElementById("result");
  result.innerHTML = "";

  if (currentQuestion >= testQuestions.length) {
    return showResult();
  }

  const q = testQuestions[currentQuestion];
  quiz.innerHTML = `<p>${q.q}</p>`;
  Object.entries(q.a).forEach(([type, score]) => {
    const btn = document.createElement("button");
    btn.textContent = type;
    btn.onclick = () => {
      archetypeScores[type] += score;
      currentQuestion++;
      showQuestion();
    };
    quiz.appendChild(btn);
  });
}

function showResult() {
  const quiz = document.getElementById("quiz");
  quiz.innerHTML = "";

  const max = Object.entries(archetypeScores).sort((a, b) => b[1] - a[1])[0];
  const result = document.getElementById("result");

  result.innerHTML = `<h3>–¢—ã ‚Äî ${max[0]}</h3><p>${describeArchetype(max[0])}</p>`;
}

function describeArchetype(type) {
  switch (type) {
    case "–•–∏—â–Ω–∏–∫":
      return "–ê—Ç–∞–∫—É—é—â–∏–π, —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π, –æ–ø–∞—Å–Ω—ã–π. –î–µ–π—Å—Ç–≤—É–µ—Ç –±—ã—Å—Ç—Ä–æ, —Ä–µ–¥–∫–æ –æ–±—ä—è—Å–Ω—è–µ—Ç.";
    case "–°—Ç—Ä–∞—Ç–µ–≥":
      return "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç, –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —É–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏. –ù–µ —Ç—Ä–∞—Ç–∏—Ç —Å–µ–±—è.";
    case "–ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä":
      return "–í–∑—Ä—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–∏, –≤–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ö–∞–æ—Å, –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–∏–Ω–∞–º–∏–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è.";
    case "–û—Ä–∞–∫—É–ª":
      return "–í–∏–¥–∏—Ç –≥–ª—É–±–∂–µ. –°–º–æ—Ç—Ä–∏—Ç –≤ —Å—É—Ç—å, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–π. –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–Ω–∞–Ω–∏–µ–º.";
    case "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
      return "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –ù–µ —Å–±–∏–≤–∞–µ—Ç—Å—è. –î–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.";
    default:
      return "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –≤–Ω–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤.";
  }
}// üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
function addGoal() {
  const text = document.getElementById("goalInput").value.trim();
  const type = document.getElementById("goalType").value;

  if (!text) return;

  const li = document.createElement("li");
  li.textContent = `üéØ ${text}`;
  li.className = type;
  li.setAttribute("data-status", "plan");
  li.onclick = () => cycleGoalStatus(li);

  document.getElementById("strategyList").appendChild(li);
  document.getElementById("goalInput").value = "";
  saveLog("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å: " + text + " [" + type + "]");
}

function cycleGoalStatus(li) {
  const statuses = ["plan", "process", "done", "fail"];
  let current = li.getAttribute("data-status") || "plan";
  let index = statuses.indexOf(current);
  let next = statuses[(index + 1) % statuses.length];
  li.setAttribute("data-status", next);
  li.style.opacity = next === "fail" ? 0.5 : 1;
  li.style.textDecoration = next === "done" ? "line-through" : "none";
  saveLog(`–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${li.textContent} ‚Üí ${next}`);
}
// ‚ö†Ô∏è –ê–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã
function checkAlerts() {
  const alerts = [];

  // 1. –ù–µ—Ç —Ñ–∏–∑–æ
  const fitData = localStorage.getItem("fitLog");
  if (!fitData || JSON.parse(fitData).length === 0) {
    alerts.push("‚ùå –ù–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –¢–µ–ª–æ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç.");
  }

  // 2. –í—Ä–∞–≥–∏ –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏
  const people = localStorage.getItem("people");
  if (people) {
    const redCount = JSON.parse(people).filter(p => p.includes("red")).length;
    if (redCount > 0) {
      alerts.push("üî¥ –í –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –µ—Å—Ç—å –≤—Ä–∞–≥–∏. –ü—Ä–∏–º–∏ –º–µ—Ä—ã.");
    }
  }

  // 3. –ë–∞–ª–∞–Ω—Å –º–∏–Ω—É—Å–æ–≤–æ–π
  const finance = localStorage.getItem("finance");
  if (finance) {
    const f = JSON.parse(finance);
    if (f.income < f.expense) {
      alerts.push("üìâ –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.");
    }
  }

  // 4. –ù–µ—Ç —Ü–µ–ª–µ–π
  const strategyList = document.getElementById("strategyList");
  if (strategyList.children.length === 0) {
    alerts.push("ü™ì –ö–∞—Ä—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—É—Å—Ç–∞. –¢—ã –∏–¥—ë—à—å –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–∞.");
  }

  // –í—ã–≤–æ–¥
  const alertList = document.getElementById("alertList");
  alertList.innerHTML = "";
  alerts.forEach(msg => {
    const li = document.createElement("li");
    li.textContent = msg;
    li.style.color = "#f00";
    alertList.appendChild(li);
  });
}

window.addEventListener("DOMContentLoaded", () => {
  setTimeout(checkAlerts, 1000); // –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
});
// üíæ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
  const data = {
    tasks: localStorage.getItem("tasks"),
    people: localStorage.getItem("people"),
    fitLog: localStorage.getItem("fitLog"),
    finance: localStorage.getItem("finance"),
    goals: document.getElementById("strategyList").innerHTML
  };

  const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" });
  const url = URL.createObjectURL(blob);

  const a = document.createElement("a");
  a.href = url;
  a.download = "blacktrigger-backup.json";
  a.click();

  URL.revokeObjectURL(url);
  saveLog("–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.");
}

function importData() {
  const fileInput = document.getElementById("importFile");
  const file = fileInput.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function (e) {
    const data = JSON.parse(e.target.result);

    if (data.tasks) localStorage.setItem("tasks", data.tasks);
    if (data.people) localStorage.setItem("people", data.people);
    if (data.fitLog) localStorage.setItem("fitLog", data.fitLog);
    if (data.finance) localStorage.setItem("finance", data.finance);
    if (data.goals) document.getElementById("strategyList").innerHTML = data.goals;

    location.reload();
  };

  reader.readAsText(file);
}
// ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
function scheduleReminder(hour, minute, message) {
  const now = new Date();
  const target = new Date();
  target.setHours(hour);
  target.setMinutes(minute);
  target.setSeconds(0);

  if (target < now) target.setDate(target.getDate() + 1);
  const delay = target.getTime() - now.getTime();

  setTimeout(() => {
    alert("üïë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + message);
    scheduleReminder(hour, minute, message); // –ø–æ–≤—Ç–æ—Ä
  }, delay);
}

window.addEventListener("DOMContentLoaded", () => {
  scheduleReminder(8, 0, "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å");
  scheduleReminder(21, 0, "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ü–µ–ª–∏");
});
// ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
function addReminder() {
  const time = document.getElementById("reminderTime").value;
  const text = document.getElementById("reminderText").value.trim();
  if (!time || !text) return;

  const reminder = { time, text };
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.push(reminder);
  localStorage.setItem("reminders", JSON.stringify(reminders));

  renderReminders();
  scheduleReminder(reminder);
  saveLog("–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + time + " ‚Äî " + text);

  document.getElementById("reminderTime").value = "";
  document.getElementById("reminderText").value = "";
}

function renderReminders() {
  const list = document.getElementById("reminderList");
  list.innerHTML = "";
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.forEach((r, i) => {
    const li = document.createElement("li");
    li.textContent = `${r.time} ‚Äî ${r.text}`;
    const btn = document.createElement("button");
    btn.textContent = "‚ùå";
    btn.onclick = () => {
      reminders.splice(i, 1);
      localStorage.setItem("reminders", JSON.stringify(reminders));
      renderReminders();
    };
    li.appendChild(btn);
    list.appendChild(li);
  });
}

function scheduleReminder(reminder) {
  const now = new Date();
  const [hour, minute] = reminder.time.split(":").map(Number);
  const target = new Date();
  target.setHours(hour, minute, 0, 0);
  if (target <= now) target.setDate(now.getDate() + 1);
  const delay = target - now;

  setTimeout(() => {
    alert("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + reminder.text);
    scheduleReminder(reminder); // –ü–æ–≤—Ç–æ—Ä –∑–∞–≤—Ç—Ä–∞
  }, delay);
}

function loadReminders() {
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.forEach(scheduleReminder);
  renderReminders();
}

window.addEventListener("DOMContentLoaded", loadReminders);
// üìö –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
function saveLog(entry) {
  const now = new Date();
  const timestamp = now.toLocaleString();
  const log = JSON.parse(localStorage.getItem("activityLog") || "[]");
  log.push({ time: timestamp, entry });
  localStorage.setItem("activityLog", JSON.stringify(log));
}

function toggleLog() {
  const logList = document.getElementById("logList");
  logList.style.display = logList.style.display === "none" ? "block" : "none";
  renderLog();
  updateActivityChart();
}

function renderLog() {
  const logList = document.getElementById("logList");
  logList.innerHTML = "";
  const log = JSON.parse(localStorage.getItem("activityLog") || "[]").reverse();
  log.forEach(item => {
    const li = document.createElement("li");
    li.textContent = `${item.time} ‚Äî ${item.entry}`;
    logList.appendChild(li);
  });
}

function updateActivityChart() {
  const raw = JSON.parse(localStorage.getItem("activityLog") || "[]");
  const map = {};

  raw.forEach(item => {
    const date = item.time.split(",")[0];
    map[date] = (map[date] || 0) + 1;
  });

  const labels = Object.keys(map);
  const values = Object.values(map);

  if (window.activityChart) {
    window.activityChart.destroy();
  }

  const ctx = document.getElementById("activityChart").getContext("2d");
  window.activityChart = new Chart(ctx, {
    type: "line",
    data: {
      labels: labels,
      datasets: [{
        label: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å)",
        data: values,
        fill: false,
        borderColor: "#0f0",
        tension: 0.2
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          ticks: { color: "#0f0" },
          grid: { color: "#333" }
        },
        x: {
          ticks: { color: "#0f0" },
          grid: { color: "#333" }
        }
      },
      plugins: {
        legend: { display: false }
      }
    }
  });
}
// üïµÔ∏è –ë–æ–µ–≤–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
function runRecon() {
  const alerts = [];
  const raw = localStorage.getItem("people");
  if (!raw) return;
  const people = JSON.parse(raw);

  people.forEach(p => {
    const nameMatch = p.match(/^(.*?)\s+‚Äî/);
    const statusMatch = p.match(/class="(.*?)"/);
    if (!nameMatch || !statusMatch) return;

    const name = nameMatch[1];
    const status = statusMatch[1];

    // –í—Ä–∞–≥ –Ω–µ –≤—ã—á–µ—Ä–∫–Ω—É—Ç
    if (status === "red") {
      alerts.push(`ü©∏ ${name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—Ä–∞–≥, –Ω–æ –Ω–µ —É—Å—Ç—Ä–∞–Ω—ë–Ω.`);
    }

    // –ë–∞–ª–ª–∞—Å—Ç
    if (p.includes("–±–∞–ª–ª–∞—Å—Ç") || p.includes("–Ω–µ –¥–∞—ë—Ç —Ä–µ—Å—É—Ä—Å")) {
      alerts.push(`‚ö†Ô∏è ${name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –±–∞–ª–ª–∞—Å—Ç, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.`);
    }

    // –†–µ–ª–∏–≥–∏–æ–∑–Ω–æ—Å—Ç—å + —Å–ª–∞–±–æ—Å—Ç—å
    if (p.includes("—Ä–µ–ª–∏–≥–∏–æ–∑–µ–Ω") && p.includes("—Å–ª–∞–±")) {
      alerts.push(`üß™ ${name} ‚Äî —É—è–∑–≤–∏–º, –Ω–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Ç–µ–±—è. –û–ø–∞—Å–Ω–æ—Å—Ç—å.`);
    }

    // –ù–µ–π—Ç—Ä–∞–ª –±–µ–∑ –æ—Ü–µ–Ω–∫–∏
    if (status === "yellow" && !p.includes("+") && !p.includes("-")) {
      alerts.push(`üü° ${name} –∑–∞—Å—Ç—Ä—è–ª –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ. –†–µ—à–∞–π —Å—É–¥—å–±—É.`);
    }
  });

  const alertList = document.getElementById("alertList");
  alerts.forEach(msg => {
    const li = document.createElement("li");
    li.textContent = msg;
    li.style.color = "#f90";
    alertList.appendChild(li);
    saveLog("–†–∞–∑–≤–µ–¥–∫–∞: " + msg);
  });
}

window.addEventListener("DOMContentLoaded", () => {
  setTimeout(runRecon, 1500); // –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
});