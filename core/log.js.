// üß† –§–∞–π–ª: core/log.js ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–º –¥–µ–π—Å—Ç–≤–∏–π

function saveLog(entry) { const now = new Date().toLocaleString(); const log = JSON.parse(localStorage.getItem("activityLog") || "[]"); log.push({ time: now, entry }); localStorage.setItem("activityLog", JSON.stringify(log)); }

function toggleLog() { const logList = document.getElementById("logList"); logList.style.display = logList.style.display === "none" ? "block" : "none"; renderLog(); updateActivityChart(); }

function renderLog() { const logList = document.getElementById("logList"); logList.innerHTML = ""; const log = JSON.parse(localStorage.getItem("activityLog") || "[]").reverse(); log.forEach(item => { const li = document.createElement("li"); li.textContent = ${item.time} ‚Äî ${item.entry}; logList.appendChild(li); }); }

function updateActivityChart() { const raw = JSON.parse(localStorage.getItem("activityLog") || "[]"); const map = {};

raw.forEach(item => { const date = item.time.split(",")[0]; map[date] = (map[date] || 0) + 1; });

const labels = Object.keys(map); const values = Object.values(map);

if (window.activityChart) window.activityChart.destroy();

const ctx = document.getElementById("activityChart").getContext("2d"); window.activityChart = new Chart(ctx, { type: "line", data: { labels: labels, datasets: [{ label: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å)", data: values, fill: false, borderColor: "#0f0", tension: 0.2 }] }, options: { scales: { y: { beginAtZero: true, ticks: { color: "#0f0" }, grid: { color: "#333" } }, x: { ticks: { color: "#0f0" }, grid: { color: "#333" } } }, plugins: { legend: { display: false } } } }); }

